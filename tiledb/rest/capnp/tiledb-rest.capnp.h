// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: tiledb-rest.capnp

#ifndef CAPNP_INCLUDED_b57d9224b587d87f_
#define CAPNP_INCLUDED_b57d9224b587d87f_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a15a2ec1a9d0b27c);
enum class ArrayType_a15a2ec1a9d0b27c : uint16_t {
  DENSE,
  SPARSE,
};
CAPNP_DECLARE_ENUM(ArrayType, a15a2ec1a9d0b27c);
CAPNP_DECLARE_SCHEMA(f5e5c8fa729787ea);
enum class Compressor_f5e5c8fa729787ea : uint16_t {
  NO_COMPRESSION,
  GZIP,
  ZSTD,
  LZ4,
  BLOSC_L_Z,
  BLOSC_L_Z4,
  BLOSC_L_Z4_H_C,
  BLOSC_SNAPPY,
  BLOSC_ZLIB,
  BLOSC_ZSTD,
  RLE,
  BZIP2,
  DOUBLE_DELTA,
};
CAPNP_DECLARE_ENUM(Compressor, f5e5c8fa729787ea);
CAPNP_DECLARE_SCHEMA(cf6003f090be2f7b);
enum class Datatype_cf6003f090be2f7b : uint16_t {
  INT32,
  INT64,
  FLOAT32,
  FLOAT64,
  CHAR,
  INT8,
  UINT8,
  INT16,
  UINT16,
  UINT32,
  UINT64,
  STRING_ASCII,
  STRING_U_T_F9,
  STRING_U_T_F16,
  STRING_U_T_F32,
  STRING_U_C_S2,
  STRING_U_C_S4,
  ANY,
};
CAPNP_DECLARE_ENUM(Datatype, cf6003f090be2f7b);
CAPNP_DECLARE_SCHEMA(cd1d92870a0ed5c4);
enum class Layout_cd1d92870a0ed5c4 : uint16_t {
  ROW_MAJOR,
  COL_MAJOR,
  GLOBAL_ORDER,
  UNORDERED,
};
CAPNP_DECLARE_ENUM(Layout, cd1d92870a0ed5c4);
CAPNP_DECLARE_SCHEMA(8891d92d60fc4574);
enum class Querystatus_8891d92d60fc4574 : uint16_t {
  FAILED,
  COMPLETED,
  INPROGRESS,
  INCOMPLETE,
  UNINITIALIZED,
};
CAPNP_DECLARE_ENUM(Querystatus, 8891d92d60fc4574);
CAPNP_DECLARE_SCHEMA(ff6616ed105bde22);
enum class Querytype_ff6616ed105bde22 : uint16_t {
  READ,
  WRITE,
};
CAPNP_DECLARE_ENUM(Querytype, ff6616ed105bde22);
CAPNP_DECLARE_SCHEMA(d71de32f98e296fe);
CAPNP_DECLARE_SCHEMA(92ad78f56de3d76a);
CAPNP_DECLARE_SCHEMA(91ffad4460acd176);
CAPNP_DECLARE_SCHEMA(8dad27d4e9db0a95);
CAPNP_DECLARE_SCHEMA(95e26a84d32d8223);
CAPNP_DECLARE_SCHEMA(a2a652536db09fa0);
CAPNP_DECLARE_SCHEMA(a8c1b2a2aabd98a0);
CAPNP_DECLARE_SCHEMA(de030f447664754c);
CAPNP_DECLARE_SCHEMA(fa787661cd3563a4);
CAPNP_DECLARE_SCHEMA(f179c194ae71718c);
CAPNP_DECLARE_SCHEMA(db5514c8aaf6faea);
CAPNP_DECLARE_SCHEMA(a83707d3ba24dd32);
CAPNP_DECLARE_SCHEMA(a9caccb4333a2baf);
CAPNP_DECLARE_SCHEMA(c0c730b5390f4427);
CAPNP_DECLARE_SCHEMA(c6706955aa016d5b);
CAPNP_DECLARE_SCHEMA(ea9a3e058a1aabb4);
CAPNP_DECLARE_SCHEMA(8ba60147a0e6735e);
CAPNP_DECLARE_SCHEMA(96ba49d0f8b23ccc);
CAPNP_DECLARE_SCHEMA(9980df357e392515);

}  // namespace schemas
}  // namespace capnp

typedef ::capnp::schemas::ArrayType_a15a2ec1a9d0b27c ArrayType;

typedef ::capnp::schemas::Compressor_f5e5c8fa729787ea Compressor;

typedef ::capnp::schemas::Datatype_cf6003f090be2f7b Datatype;

typedef ::capnp::schemas::Layout_cd1d92870a0ed5c4 Layout;

typedef ::capnp::schemas::Querystatus_8891d92d60fc4574 Querystatus;

typedef ::capnp::schemas::Querytype_ff6616ed105bde22 Querytype;

struct ArraySchema {
  ArraySchema() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d71de32f98e296fe, 2, 9)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Attribute {
  Attribute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92ad78f56de3d76a, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct AttributeBuffer {
  AttributeBuffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Buffer;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91ffad4460acd176, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct AttributeBuffer::Buffer {
  Buffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
    LIST_TEXT,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8dad27d4e9db0a95, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension {
  Dimension() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TileExtent;
  struct Domain;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95e26a84d32d8223, 3, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension::TileExtent {
  TileExtent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2a652536db09fa0, 3, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension::Domain {
  Domain() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8c1b2a2aabd98a0, 3, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Domain {
  Domain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de030f447664754c, 0, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Error {
  Error() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa787661cd3563a4, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

template <
    typename Key = ::capnp::AnyPointer,
    typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f179c194ae71718c, 0, 1)
#if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand();
    }
#endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db5514c8aaf6faea, 0, 2)
#if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand();
    }
#endif  // !CAPNP_LITE
  };
};

struct MapInt64 {
  MapInt64() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a83707d3ba24dd32, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapInt64::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9caccb4333a2baf, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GlobalWriteState {
  GlobalWriteState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0c730b5390f4427, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Tile {
  Tile() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Buffer;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6706955aa016d5b, 3, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Tile::Buffer {
  Buffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea9a3e058a1aabb4, 3, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Writer {
  Writer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ba60147a0e6735e, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Query {
  Query() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Subarray;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96ba49d0f8b23ccc, 1, 7)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Query::Subarray {
  Subarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9980df357e392515, 1, 7)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ArraySchema::Reader {
 public:
  typedef ArraySchema Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayType() const;
  inline ::capnp::Text::Reader getArrayType() const;

  inline bool hasAttributes() const;
  inline ::capnp::List<::Attribute>::Reader getAttributes() const;

  inline ::uint64_t getCapacity() const;

  inline bool hasCellOrder() const;
  inline ::capnp::Text::Reader getCellOrder() const;

  inline bool hasCoordsCompression() const;
  inline ::capnp::Text::Reader getCoordsCompression() const;

  inline ::int32_t getCoordsCompressionLevel() const;

  inline bool hasDomain() const;
  inline ::Domain::Reader getDomain() const;

  inline bool hasOffsetCompression() const;
  inline ::capnp::Text::Reader getOffsetCompression() const;

  inline ::int32_t getOffsetCompressionLevel() const;

  inline bool hasTileOrder() const;
  inline ::capnp::Text::Reader getTileOrder() const;

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasVersion() const;
  inline ::capnp::List<::int32_t>::Reader getVersion() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArraySchema::Builder {
 public:
  typedef ArraySchema Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayType();
  inline ::capnp::Text::Builder getArrayType();
  inline void setArrayType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initArrayType(unsigned int size);
  inline void adoptArrayType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownArrayType();

  inline bool hasAttributes();
  inline ::capnp::List<::Attribute>::Builder getAttributes();
  inline void setAttributes(::capnp::List<::Attribute>::Reader value);
  inline ::capnp::List<::Attribute>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(
      ::capnp::Orphan<::capnp::List<::Attribute>>&& value);
  inline ::capnp::Orphan<::capnp::List<::Attribute>> disownAttributes();

  inline ::uint64_t getCapacity();
  inline void setCapacity(::uint64_t value);

  inline bool hasCellOrder();
  inline ::capnp::Text::Builder getCellOrder();
  inline void setCellOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCellOrder(unsigned int size);
  inline void adoptCellOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCellOrder();

  inline bool hasCoordsCompression();
  inline ::capnp::Text::Builder getCoordsCompression();
  inline void setCoordsCompression(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCoordsCompression(unsigned int size);
  inline void adoptCoordsCompression(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCoordsCompression();

  inline ::int32_t getCoordsCompressionLevel();
  inline void setCoordsCompressionLevel(::int32_t value);

  inline bool hasDomain();
  inline ::Domain::Builder getDomain();
  inline void setDomain(::Domain::Reader value);
  inline ::Domain::Builder initDomain();
  inline void adoptDomain(::capnp::Orphan<::Domain>&& value);
  inline ::capnp::Orphan<::Domain> disownDomain();

  inline bool hasOffsetCompression();
  inline ::capnp::Text::Builder getOffsetCompression();
  inline void setOffsetCompression(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initOffsetCompression(unsigned int size);
  inline void adoptOffsetCompression(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownOffsetCompression();

  inline ::int32_t getOffsetCompressionLevel();
  inline void setOffsetCompressionLevel(::int32_t value);

  inline bool hasTileOrder();
  inline ::capnp::Text::Builder getTileOrder();
  inline void setTileOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initTileOrder(unsigned int size);
  inline void adoptTileOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownTileOrder();

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasVersion();
  inline ::capnp::List<::int32_t>::Builder getVersion();
  inline void setVersion(::capnp::List<::int32_t>::Reader value);
  inline void setVersion(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownVersion();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArraySchema::Pipeline {
 public:
  typedef ArraySchema Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::Domain::Pipeline getDomain();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Attribute::Reader {
 public:
  typedef Attribute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getCellValNum() const;

  inline bool hasCompressor() const;
  inline ::capnp::Text::Reader getCompressor() const;

  inline ::int32_t getCompressorLevel() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Attribute::Builder {
 public:
  typedef Attribute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getCellValNum();
  inline void setCellValNum(::uint32_t value);

  inline bool hasCompressor();
  inline ::capnp::Text::Builder getCompressor();
  inline void setCompressor(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCompressor(unsigned int size);
  inline void adoptCompressor(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCompressor();

  inline ::int32_t getCompressorLevel();
  inline void setCompressorLevel(::int32_t value);

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Attribute::Pipeline {
 public:
  typedef Attribute Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttributeBuffer::Reader {
 public:
  typedef AttributeBuffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename Buffer::Reader getBuffer() const;

  inline bool hasBufferOffset() const;
  inline ::capnp::List<::uint64_t>::Reader getBufferOffset() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttributeBuffer::Builder {
 public:
  typedef AttributeBuffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename Buffer::Builder getBuffer();
  inline typename Buffer::Builder initBuffer();

  inline bool hasBufferOffset();
  inline ::capnp::List<::uint64_t>::Builder getBufferOffset();
  inline void setBufferOffset(::capnp::List<::uint64_t>::Reader value);
  inline void setBufferOffset(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initBufferOffset(unsigned int size);
  inline void adoptBufferOffset(
      ::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownBufferOffset();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttributeBuffer::Pipeline {
 public:
  typedef AttributeBuffer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename Buffer::Pipeline getBuffer();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttributeBuffer::Buffer::Reader {
 public:
  typedef Buffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

  inline bool isListText() const;
  inline bool hasListText() const;
  inline ::capnp::Text::Reader getListText() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttributeBuffer::Buffer::Builder {
 public:
  typedef Buffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

  inline bool isListText();
  inline bool hasListText();
  inline ::capnp::Text::Builder getListText();
  inline void setListText(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initListText(unsigned int size);
  inline void adoptListText(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownListText();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttributeBuffer::Buffer::Pipeline {
 public:
  typedef Buffer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::Reader {
 public:
  typedef Dimension Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool getNullTileExtent() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename TileExtent::Reader getTileExtent() const;

  inline typename Domain::Reader getDomain() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::Builder {
 public:
  typedef Dimension Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool getNullTileExtent();
  inline void setNullTileExtent(bool value);

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename TileExtent::Builder getTileExtent();
  inline typename TileExtent::Builder initTileExtent();

  inline typename Domain::Builder getDomain();
  inline typename Domain::Builder initDomain();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::Pipeline {
 public:
  typedef Dimension Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename TileExtent::Pipeline getTileExtent();
  inline typename Domain::Pipeline getDomain();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::TileExtent::Reader {
 public:
  typedef TileExtent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline ::int8_t getInt8() const;

  inline bool isUint8() const;
  inline ::uint8_t getUint8() const;

  inline bool isInt16() const;
  inline ::int16_t getInt16() const;

  inline bool isUint16() const;
  inline ::uint16_t getUint16() const;

  inline bool isInt32() const;
  inline ::int32_t getInt32() const;

  inline bool isUint32() const;
  inline ::uint32_t getUint32() const;

  inline bool isInt64() const;
  inline ::int64_t getInt64() const;

  inline bool isUint64() const;
  inline ::uint64_t getUint64() const;

  inline bool isFloat32() const;
  inline float getFloat32() const;

  inline bool isFloat64() const;
  inline double getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::TileExtent::Builder {
 public:
  typedef TileExtent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline ::int8_t getInt8();
  inline void setInt8(::int8_t value);

  inline bool isUint8();
  inline ::uint8_t getUint8();
  inline void setUint8(::uint8_t value);

  inline bool isInt16();
  inline ::int16_t getInt16();
  inline void setInt16(::int16_t value);

  inline bool isUint16();
  inline ::uint16_t getUint16();
  inline void setUint16(::uint16_t value);

  inline bool isInt32();
  inline ::int32_t getInt32();
  inline void setInt32(::int32_t value);

  inline bool isUint32();
  inline ::uint32_t getUint32();
  inline void setUint32(::uint32_t value);

  inline bool isInt64();
  inline ::int64_t getInt64();
  inline void setInt64(::int64_t value);

  inline bool isUint64();
  inline ::uint64_t getUint64();
  inline void setUint64(::uint64_t value);

  inline bool isFloat32();
  inline float getFloat32();
  inline void setFloat32(float value);

  inline bool isFloat64();
  inline double getFloat64();
  inline void setFloat64(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::TileExtent::Pipeline {
 public:
  typedef TileExtent Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::Domain::Reader {
 public:
  typedef Domain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::Domain::Builder {
 public:
  typedef Domain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::Domain::Pipeline {
 public:
  typedef Domain Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Domain::Reader {
 public:
  typedef Domain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCellOrder() const;
  inline ::capnp::Text::Reader getCellOrder() const;

  inline bool hasDimensions() const;
  inline ::capnp::List<::Dimension>::Reader getDimensions() const;

  inline bool hasTileOrder() const;
  inline ::capnp::Text::Reader getTileOrder() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Domain::Builder {
 public:
  typedef Domain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCellOrder();
  inline ::capnp::Text::Builder getCellOrder();
  inline void setCellOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCellOrder(unsigned int size);
  inline void adoptCellOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCellOrder();

  inline bool hasDimensions();
  inline ::capnp::List<::Dimension>::Builder getDimensions();
  inline void setDimensions(::capnp::List<::Dimension>::Reader value);
  inline ::capnp::List<::Dimension>::Builder initDimensions(unsigned int size);
  inline void adoptDimensions(
      ::capnp::Orphan<::capnp::List<::Dimension>>&& value);
  inline ::capnp::Orphan<::capnp::List<::Dimension>> disownDimensions();

  inline bool hasTileOrder();
  inline ::capnp::Text::Builder getTileOrder();
  inline void setTileOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initTileOrder(unsigned int size);
  inline void adoptTileOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownTileOrder();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Domain::Pipeline {
 public:
  typedef Domain Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Error::Reader {
 public:
  typedef Error Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::int64_t getCode() const;

  inline bool hasMessage() const;
  inline ::capnp::Text::Reader getMessage() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Error::Builder {
 public:
  typedef Error Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::int64_t getCode();
  inline void setCode(::int64_t value);

  inline bool hasMessage();
  inline ::capnp::Text::Builder getMessage();
  inline void setMessage(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownMessage();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Error::Pipeline {
 public:
  typedef Error Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
 public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
 public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
  getEntries();
  inline void setEntries(
      typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader value);
  inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
 public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline ::capnp::ReaderFor<Value> getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline ::capnp::BuilderFor<Key> getKey();
  inline void setKey(::capnp::ReaderFor<Key> value);
  inline ::capnp::BuilderFor<Key> initKey();
  inline ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline ::capnp::BuilderFor<Value> getValue();
  inline void setValue(::capnp::ReaderFor<Value> value);
  inline ::capnp::BuilderFor<Value> initValue();
  inline ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::capnp::PipelineFor<Key> getKey();
  inline ::capnp::PipelineFor<Value> getValue();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapInt64::Reader {
 public:
  typedef MapInt64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<::MapInt64::Entry>::Reader getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInt64::Builder {
 public:
  typedef MapInt64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<::MapInt64::Entry>::Builder getEntries();
  inline void setEntries(::capnp::List<::MapInt64::Entry>::Reader value);
  inline ::capnp::List<::MapInt64::Entry>::Builder initEntries(
      unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<::MapInt64::Entry>>&& value);
  inline ::capnp::Orphan<::capnp::List<::MapInt64::Entry>> disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInt64::Pipeline {
 public:
  typedef MapInt64 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapInt64::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline ::int64_t getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInt64::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline ::int64_t getValue();
  inline void setValue(::int64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInt64::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GlobalWriteState::Reader {
 public:
  typedef GlobalWriteState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCellsWritten() const;
  inline ::MapInt64::Reader getCellsWritten() const;

  inline bool hasLastTiles() const;
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader getLastTiles()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GlobalWriteState::Builder {
 public:
  typedef GlobalWriteState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCellsWritten();
  inline ::MapInt64::Builder getCellsWritten();
  inline void setCellsWritten(::MapInt64::Reader value);
  inline ::MapInt64::Builder initCellsWritten();
  inline void adoptCellsWritten(::capnp::Orphan<::MapInt64>&& value);
  inline ::capnp::Orphan<::MapInt64> disownCellsWritten();

  inline bool hasLastTiles();
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder getLastTiles();
  inline void setLastTiles(
      ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader value);
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder initLastTiles();
  inline void adoptLastTiles(
      ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>
  disownLastTiles();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GlobalWriteState::Pipeline {
 public:
  typedef GlobalWriteState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::MapInt64::Pipeline getCellsWritten();
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Pipeline getLastTiles();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tile::Reader {
 public:
  typedef Tile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getCellSize() const;

  inline bool hasCompressor() const;
  inline ::capnp::Text::Reader getCompressor() const;

  inline ::int32_t getCompressorLevel() const;

  inline ::uint32_t getDimNum() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename Buffer::Reader getBuffer() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tile::Builder {
 public:
  typedef Tile Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getCellSize();
  inline void setCellSize(::uint64_t value);

  inline bool hasCompressor();
  inline ::capnp::Text::Builder getCompressor();
  inline void setCompressor(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCompressor(unsigned int size);
  inline void adoptCompressor(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCompressor();

  inline ::int32_t getCompressorLevel();
  inline void setCompressorLevel(::int32_t value);

  inline ::uint32_t getDimNum();
  inline void setDimNum(::uint32_t value);

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename Buffer::Builder getBuffer();
  inline typename Buffer::Builder initBuffer();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tile::Pipeline {
 public:
  typedef Tile Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename Buffer::Pipeline getBuffer();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tile::Buffer::Reader {
 public:
  typedef Buffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tile::Buffer::Builder {
 public:
  typedef Buffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tile::Buffer::Pipeline {
 public:
  typedef Buffer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Writer::Reader {
 public:
  typedef Writer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGlobalWriteState() const;
  inline ::GlobalWriteState::Reader getGlobalWriteState() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Writer::Builder {
 public:
  typedef Writer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasGlobalWriteState();
  inline ::GlobalWriteState::Builder getGlobalWriteState();
  inline void setGlobalWriteState(::GlobalWriteState::Reader value);
  inline ::GlobalWriteState::Builder initGlobalWriteState();
  inline void adoptGlobalWriteState(
      ::capnp::Orphan<::GlobalWriteState>&& value);
  inline ::capnp::Orphan<::GlobalWriteState> disownGlobalWriteState();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Writer::Pipeline {
 public:
  typedef Writer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::GlobalWriteState::Pipeline getGlobalWriteState();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Query::Reader {
 public:
  typedef Query Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArraySchema() const;
  inline ::ArraySchema::Reader getArraySchema() const;

  inline bool hasBuffers() const;
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Reader getBuffers() const;

  inline bool hasLayout() const;
  inline ::capnp::Text::Reader getLayout() const;

  inline bool hasStatus() const;
  inline ::capnp::Text::Reader getStatus() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool hasWriter() const;
  inline ::Writer::Reader getWriter() const;

  inline typename Subarray::Reader getSubarray() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Query::Builder {
 public:
  typedef Query Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasArraySchema();
  inline ::ArraySchema::Builder getArraySchema();
  inline void setArraySchema(::ArraySchema::Reader value);
  inline ::ArraySchema::Builder initArraySchema();
  inline void adoptArraySchema(::capnp::Orphan<::ArraySchema>&& value);
  inline ::capnp::Orphan<::ArraySchema> disownArraySchema();

  inline bool hasBuffers();
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder getBuffers();
  inline void setBuffers(::Map<::capnp::Text, ::AttributeBuffer>::Reader value);
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder initBuffers();
  inline void adoptBuffers(
      ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>
  disownBuffers();

  inline bool hasLayout();
  inline ::capnp::Text::Builder getLayout();
  inline void setLayout(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLayout(unsigned int size);
  inline void adoptLayout(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLayout();

  inline bool hasStatus();
  inline ::capnp::Text::Builder getStatus();
  inline void setStatus(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownStatus();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool hasWriter();
  inline ::Writer::Builder getWriter();
  inline void setWriter(::Writer::Reader value);
  inline ::Writer::Builder initWriter();
  inline void adoptWriter(::capnp::Orphan<::Writer>&& value);
  inline ::capnp::Orphan<::Writer> disownWriter();

  inline typename Subarray::Builder getSubarray();
  inline typename Subarray::Builder initSubarray();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Query::Pipeline {
 public:
  typedef Query Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::ArraySchema::Pipeline getArraySchema();
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Pipeline getBuffers();
  inline ::Writer::Pipeline getWriter();
  inline typename Subarray::Pipeline getSubarray();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Query::Subarray::Reader {
 public:
  typedef Subarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Query::Subarray::Builder {
 public:
  typedef Subarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Query::Subarray::Pipeline {
 public:
  typedef Subarray Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ArraySchema::Reader::hasArrayType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasArrayType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getArrayType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getArrayType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setArrayType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initArrayType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptArrayType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownArrayType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasAttributes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasAttributes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::Attribute>::Reader ArraySchema::Reader::getAttributes()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::Attribute>::Builder
ArraySchema::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setAttributes(
    ::capnp::List<::Attribute>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::Attribute>::Builder ArraySchema::Builder::initAttributes(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptAttributes(
    ::capnp::Orphan<::capnp::List<::Attribute>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::Attribute>>
ArraySchema::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint64_t ArraySchema::Reader::getCapacity() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArraySchema::Builder::getCapacity() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArraySchema::Builder::setCapacity(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ArraySchema::Reader::hasCellOrder() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasCellOrder() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getCellOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setCellOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initCellOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptCellOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasCoordsCompression() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasCoordsCompression() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getCoordsCompression() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getCoordsCompression() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setCoordsCompression(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initCoordsCompression(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptCoordsCompression(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArraySchema::Builder::disownCoordsCompression() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::int32_t ArraySchema::Reader::getCoordsCompressionLevel() const {
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int32_t ArraySchema::Builder::getCoordsCompressionLevel() {
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ArraySchema::Builder::setCoordsCompressionLevel(::int32_t value) {
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ArraySchema::Reader::hasDomain() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasDomain() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Domain::Reader ArraySchema::Reader::getDomain() const {
  return ::capnp::_::PointerHelpers<::Domain>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::Domain::Builder ArraySchema::Builder::getDomain() {
  return ::capnp::_::PointerHelpers<::Domain>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Domain::Pipeline ArraySchema::Pipeline::getDomain() {
  return ::Domain::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setDomain(::Domain::Reader value) {
  ::capnp::_::PointerHelpers<::Domain>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::Domain::Builder ArraySchema::Builder::initDomain() {
  return ::capnp::_::PointerHelpers<::Domain>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptDomain(
    ::capnp::Orphan<::Domain>&& value) {
  ::capnp::_::PointerHelpers<::Domain>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Domain> ArraySchema::Builder::disownDomain() {
  return ::capnp::_::PointerHelpers<::Domain>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasOffsetCompression() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasOffsetCompression() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getOffsetCompression() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getOffsetCompression() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setOffsetCompression(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initOffsetCompression(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptOffsetCompression(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArraySchema::Builder::disownOffsetCompression() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline ::int32_t ArraySchema::Reader::getOffsetCompressionLevel() const {
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline ::int32_t ArraySchema::Builder::getOffsetCompressionLevel() {
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ArraySchema::Builder::setOffsetCompressionLevel(::int32_t value) {
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ArraySchema::Reader::hasTileOrder() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasTileOrder() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getTileOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setTileOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initTileOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptTileOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasVersion() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasVersion() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader ArraySchema::Reader::getVersion()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder ArraySchema::Builder::getVersion() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setVersion(
    ::capnp::List<::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline void ArraySchema::Builder::setVersion(
    ::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder ArraySchema::Builder::initVersion(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptVersion(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
ArraySchema::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline ::uint32_t Attribute::Reader::getCellValNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Attribute::Builder::getCellValNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setCellValNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasCompressor() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasCompressor() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getCompressor() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getCompressor() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setCompressor(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initCompressor(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptCompressor(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownCompressor() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::int32_t Attribute::Reader::getCompressorLevel() const {
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int32_t Attribute::Builder::getCompressorLevel() {
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setCompressorLevel(::int32_t value) {
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader AttributeBuffer::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder AttributeBuffer::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder AttributeBuffer::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> AttributeBuffer::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename AttributeBuffer::Buffer::Reader
AttributeBuffer::Reader::getBuffer() const {
  return typename AttributeBuffer::Buffer::Reader(_reader);
}
inline typename AttributeBuffer::Buffer::Builder
AttributeBuffer::Builder::getBuffer() {
  return typename AttributeBuffer::Buffer::Builder(_builder);
}
#if !CAPNP_LITE
inline typename AttributeBuffer::Buffer::Pipeline
AttributeBuffer::Pipeline::getBuffer() {
  return typename AttributeBuffer::Buffer::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename AttributeBuffer::Buffer::Builder
AttributeBuffer::Builder::initBuffer() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename AttributeBuffer::Buffer::Builder(_builder);
}
inline bool AttributeBuffer::Reader::hasBufferOffset() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Builder::hasBufferOffset() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
AttributeBuffer::Reader::getBufferOffset() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Builder::getBufferOffset() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Builder::setBufferOffset(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Builder::setBufferOffset(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Builder::initBufferOffset(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Builder::adoptBufferOffset(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
AttributeBuffer::Builder::disownBufferOffset() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::AttributeBuffer::Buffer::Which AttributeBuffer::Buffer::Reader::which()
    const {
  return _reader.getDataField<Which>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline ::AttributeBuffer::Buffer::Which
AttributeBuffer::Buffer::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AttributeBuffer::Buffer::Reader::isInt8() const {
  return which() == AttributeBuffer::Buffer::INT8;
}
inline bool AttributeBuffer::Buffer::Builder::isInt8() {
  return which() == AttributeBuffer::Buffer::INT8;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt8() const {
  if (which() != AttributeBuffer::Buffer::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt8() {
  if (which() != AttributeBuffer::Buffer::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader
AttributeBuffer::Buffer::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder
AttributeBuffer::Buffer::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder
AttributeBuffer::Buffer::Builder::initInt8(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
AttributeBuffer::Buffer::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint8() const {
  return which() == AttributeBuffer::Buffer::UINT8;
}
inline bool AttributeBuffer::Buffer::Builder::isUint8() {
  return which() == AttributeBuffer::Buffer::UINT8;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint8() const {
  if (which() != AttributeBuffer::Buffer::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint8() {
  if (which() != AttributeBuffer::Buffer::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader
AttributeBuffer::Buffer::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder
AttributeBuffer::Buffer::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder
AttributeBuffer::Buffer::Builder::initUint8(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
AttributeBuffer::Buffer::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isInt16() const {
  return which() == AttributeBuffer::Buffer::INT16;
}
inline bool AttributeBuffer::Buffer::Builder::isInt16() {
  return which() == AttributeBuffer::Buffer::INT16;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt16() const {
  if (which() != AttributeBuffer::Buffer::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt16() {
  if (which() != AttributeBuffer::Buffer::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader
AttributeBuffer::Buffer::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder
AttributeBuffer::Buffer::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder
AttributeBuffer::Buffer::Builder::initInt16(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
AttributeBuffer::Buffer::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint16() const {
  return which() == AttributeBuffer::Buffer::UINT16;
}
inline bool AttributeBuffer::Buffer::Builder::isUint16() {
  return which() == AttributeBuffer::Buffer::UINT16;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint16() const {
  if (which() != AttributeBuffer::Buffer::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint16() {
  if (which() != AttributeBuffer::Buffer::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader
AttributeBuffer::Buffer::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder
AttributeBuffer::Buffer::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder
AttributeBuffer::Buffer::Builder::initUint16(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
AttributeBuffer::Buffer::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isInt32() const {
  return which() == AttributeBuffer::Buffer::INT32;
}
inline bool AttributeBuffer::Buffer::Builder::isInt32() {
  return which() == AttributeBuffer::Buffer::INT32;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt32() const {
  if (which() != AttributeBuffer::Buffer::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt32() {
  if (which() != AttributeBuffer::Buffer::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader
AttributeBuffer::Buffer::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder
AttributeBuffer::Buffer::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder
AttributeBuffer::Buffer::Builder::initInt32(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
AttributeBuffer::Buffer::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint32() const {
  return which() == AttributeBuffer::Buffer::UINT32;
}
inline bool AttributeBuffer::Buffer::Builder::isUint32() {
  return which() == AttributeBuffer::Buffer::UINT32;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint32() const {
  if (which() != AttributeBuffer::Buffer::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint32() {
  if (which() != AttributeBuffer::Buffer::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader
AttributeBuffer::Buffer::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder
AttributeBuffer::Buffer::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder
AttributeBuffer::Buffer::Builder::initUint32(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
AttributeBuffer::Buffer::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isInt64() const {
  return which() == AttributeBuffer::Buffer::INT64;
}
inline bool AttributeBuffer::Buffer::Builder::isInt64() {
  return which() == AttributeBuffer::Buffer::INT64;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt64() const {
  if (which() != AttributeBuffer::Buffer::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt64() {
  if (which() != AttributeBuffer::Buffer::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader
AttributeBuffer::Buffer::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder
AttributeBuffer::Buffer::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder
AttributeBuffer::Buffer::Builder::initInt64(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
AttributeBuffer::Buffer::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint64() const {
  return which() == AttributeBuffer::Buffer::UINT64;
}
inline bool AttributeBuffer::Buffer::Builder::isUint64() {
  return which() == AttributeBuffer::Buffer::UINT64;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint64() const {
  if (which() != AttributeBuffer::Buffer::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint64() {
  if (which() != AttributeBuffer::Buffer::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
AttributeBuffer::Buffer::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Buffer::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Buffer::Builder::initUint64(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
AttributeBuffer::Buffer::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isFloat32() const {
  return which() == AttributeBuffer::Buffer::FLOAT32;
}
inline bool AttributeBuffer::Buffer::Builder::isFloat32() {
  return which() == AttributeBuffer::Buffer::FLOAT32;
}
inline bool AttributeBuffer::Buffer::Reader::hasFloat32() const {
  if (which() != AttributeBuffer::Buffer::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasFloat32() {
  if (which() != AttributeBuffer::Buffer::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader
AttributeBuffer::Buffer::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder
AttributeBuffer::Buffer::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder
AttributeBuffer::Buffer::Builder::initFloat32(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
AttributeBuffer::Buffer::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isFloat64() const {
  return which() == AttributeBuffer::Buffer::FLOAT64;
}
inline bool AttributeBuffer::Buffer::Builder::isFloat64() {
  return which() == AttributeBuffer::Buffer::FLOAT64;
}
inline bool AttributeBuffer::Buffer::Reader::hasFloat64() const {
  if (which() != AttributeBuffer::Buffer::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasFloat64() {
  if (which() != AttributeBuffer::Buffer::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader
AttributeBuffer::Buffer::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder
AttributeBuffer::Buffer::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder
AttributeBuffer::Buffer::Builder::initFloat64(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
AttributeBuffer::Buffer::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isListText() const {
  return which() == AttributeBuffer::Buffer::LIST_TEXT;
}
inline bool AttributeBuffer::Buffer::Builder::isListText() {
  return which() == AttributeBuffer::Buffer::LIST_TEXT;
}
inline bool AttributeBuffer::Buffer::Reader::hasListText() const {
  if (which() != AttributeBuffer::Buffer::LIST_TEXT)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasListText() {
  if (which() != AttributeBuffer::Buffer::LIST_TEXT)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader AttributeBuffer::Buffer::Reader::getListText()
    const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::LIST_TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder AttributeBuffer::Buffer::Builder::getListText() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::LIST_TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setListText(
    ::capnp::Text::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::LIST_TEXT);
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder AttributeBuffer::Buffer::Builder::initListText(
    unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::LIST_TEXT);
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptListText(
    ::capnp::Orphan<::capnp::Text>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::LIST_TEXT);
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
AttributeBuffer::Buffer::Builder::disownListText() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::LIST_TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Dimension::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Dimension::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Dimension::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Dimension::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Dimension::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Dimension::Reader::getNullTileExtent() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Dimension::Builder::getNullTileExtent() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Dimension::Builder::setNullTileExtent(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Dimension::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Dimension::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Dimension::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Dimension::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Dimension::TileExtent::Reader Dimension::Reader::getTileExtent()
    const {
  return typename Dimension::TileExtent::Reader(_reader);
}
inline typename Dimension::TileExtent::Builder
Dimension::Builder::getTileExtent() {
  return typename Dimension::TileExtent::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Dimension::TileExtent::Pipeline
Dimension::Pipeline::getTileExtent() {
  return typename Dimension::TileExtent::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Dimension::TileExtent::Builder
Dimension::Builder::initTileExtent() {
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename Dimension::TileExtent::Builder(_builder);
}
inline typename Dimension::Domain::Reader Dimension::Reader::getDomain() const {
  return typename Dimension::Domain::Reader(_reader);
}
inline typename Dimension::Domain::Builder Dimension::Builder::getDomain() {
  return typename Dimension::Domain::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Dimension::Domain::Pipeline Dimension::Pipeline::getDomain() {
  return typename Dimension::Domain::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Dimension::Domain::Builder Dimension::Builder::initDomain() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Dimension::Domain::Builder(_builder);
}
inline ::Dimension::TileExtent::Which Dimension::TileExtent::Reader::which()
    const {
  return _reader.getDataField<Which>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline ::Dimension::TileExtent::Which Dimension::TileExtent::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Dimension::TileExtent::Reader::isInt8() const {
  return which() == Dimension::TileExtent::INT8;
}
inline bool Dimension::TileExtent::Builder::isInt8() {
  return which() == Dimension::TileExtent::INT8;
}
inline ::int8_t Dimension::TileExtent::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int8_t Dimension::TileExtent::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt8(::int8_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT8);
  _builder.setDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint8() const {
  return which() == Dimension::TileExtent::UINT8;
}
inline bool Dimension::TileExtent::Builder::isUint8() {
  return which() == Dimension::TileExtent::UINT8;
}
inline ::uint8_t Dimension::TileExtent::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint8_t Dimension::TileExtent::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint8(::uint8_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT8);
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt16() const {
  return which() == Dimension::TileExtent::INT16;
}
inline bool Dimension::TileExtent::Builder::isInt16() {
  return which() == Dimension::TileExtent::INT16;
}
inline ::int16_t Dimension::TileExtent::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int16_t Dimension::TileExtent::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt16(::int16_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT16);
  _builder.setDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint16() const {
  return which() == Dimension::TileExtent::UINT16;
}
inline bool Dimension::TileExtent::Builder::isUint16() {
  return which() == Dimension::TileExtent::UINT16;
}
inline ::uint16_t Dimension::TileExtent::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint16_t Dimension::TileExtent::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint16(::uint16_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT16);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt32() const {
  return which() == Dimension::TileExtent::INT32;
}
inline bool Dimension::TileExtent::Builder::isInt32() {
  return which() == Dimension::TileExtent::INT32;
}
inline ::int32_t Dimension::TileExtent::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int32_t Dimension::TileExtent::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt32(::int32_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT32);
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint32() const {
  return which() == Dimension::TileExtent::UINT32;
}
inline bool Dimension::TileExtent::Builder::isUint32() {
  return which() == Dimension::TileExtent::UINT32;
}
inline ::uint32_t Dimension::TileExtent::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Dimension::TileExtent::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint32(::uint32_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT32);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt64() const {
  return which() == Dimension::TileExtent::INT64;
}
inline bool Dimension::TileExtent::Builder::isInt64() {
  return which() == Dimension::TileExtent::INT64;
}
inline ::int64_t Dimension::TileExtent::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int64_t Dimension::TileExtent::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt64(::int64_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT64);
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint64() const {
  return which() == Dimension::TileExtent::UINT64;
}
inline bool Dimension::TileExtent::Builder::isUint64() {
  return which() == Dimension::TileExtent::UINT64;
}
inline ::uint64_t Dimension::TileExtent::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Dimension::TileExtent::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint64(::uint64_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT64);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isFloat32() const {
  return which() == Dimension::TileExtent::FLOAT32;
}
inline bool Dimension::TileExtent::Builder::isFloat32() {
  return which() == Dimension::TileExtent::FLOAT32;
}
inline float Dimension::TileExtent::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Dimension::TileExtent::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setFloat32(float value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      Dimension::TileExtent::FLOAT32);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isFloat64() const {
  return which() == Dimension::TileExtent::FLOAT64;
}
inline bool Dimension::TileExtent::Builder::isFloat64() {
  return which() == Dimension::TileExtent::FLOAT64;
}
inline double Dimension::TileExtent::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Dimension::TileExtent::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setFloat64(double value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      Dimension::TileExtent::FLOAT64);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::Dimension::Domain::Which Dimension::Domain::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline ::Dimension::Domain::Which Dimension::Domain::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool Dimension::Domain::Reader::isInt8() const {
  return which() == Dimension::Domain::INT8;
}
inline bool Dimension::Domain::Builder::isInt8() {
  return which() == Dimension::Domain::INT8;
}
inline bool Dimension::Domain::Reader::hasInt8() const {
  if (which() != Dimension::Domain::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasInt8() {
  if (which() != Dimension::Domain::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader Dimension::Domain::Reader::getInt8()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder Dimension::Domain::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder Dimension::Domain::Builder::initInt8(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
Dimension::Domain::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isUint8() const {
  return which() == Dimension::Domain::UINT8;
}
inline bool Dimension::Domain::Builder::isUint8() {
  return which() == Dimension::Domain::UINT8;
}
inline bool Dimension::Domain::Reader::hasUint8() const {
  if (which() != Dimension::Domain::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasUint8() {
  if (which() != Dimension::Domain::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader Dimension::Domain::Reader::getUint8()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder
Dimension::Domain::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder Dimension::Domain::Builder::initUint8(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
Dimension::Domain::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isInt16() const {
  return which() == Dimension::Domain::INT16;
}
inline bool Dimension::Domain::Builder::isInt16() {
  return which() == Dimension::Domain::INT16;
}
inline bool Dimension::Domain::Reader::hasInt16() const {
  if (which() != Dimension::Domain::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasInt16() {
  if (which() != Dimension::Domain::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader Dimension::Domain::Reader::getInt16()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder
Dimension::Domain::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder Dimension::Domain::Builder::initInt16(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
Dimension::Domain::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isUint16() const {
  return which() == Dimension::Domain::UINT16;
}
inline bool Dimension::Domain::Builder::isUint16() {
  return which() == Dimension::Domain::UINT16;
}
inline bool Dimension::Domain::Reader::hasUint16() const {
  if (which() != Dimension::Domain::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasUint16() {
  if (which() != Dimension::Domain::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader Dimension::Domain::Reader::getUint16()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder
Dimension::Domain::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder
Dimension::Domain::Builder::initUint16(unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
Dimension::Domain::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isInt32() const {
  return which() == Dimension::Domain::INT32;
}
inline bool Dimension::Domain::Builder::isInt32() {
  return which() == Dimension::Domain::INT32;
}
inline bool Dimension::Domain::Reader::hasInt32() const {
  if (which() != Dimension::Domain::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasInt32() {
  if (which() != Dimension::Domain::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader Dimension::Domain::Reader::getInt32()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder
Dimension::Domain::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder Dimension::Domain::Builder::initInt32(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
Dimension::Domain::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isUint32() const {
  return which() == Dimension::Domain::UINT32;
}
inline bool Dimension::Domain::Builder::isUint32() {
  return which() == Dimension::Domain::UINT32;
}
inline bool Dimension::Domain::Reader::hasUint32() const {
  if (which() != Dimension::Domain::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasUint32() {
  if (which() != Dimension::Domain::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader Dimension::Domain::Reader::getUint32()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder
Dimension::Domain::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder
Dimension::Domain::Builder::initUint32(unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
Dimension::Domain::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isInt64() const {
  return which() == Dimension::Domain::INT64;
}
inline bool Dimension::Domain::Builder::isInt64() {
  return which() == Dimension::Domain::INT64;
}
inline bool Dimension::Domain::Reader::hasInt64() const {
  if (which() != Dimension::Domain::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasInt64() {
  if (which() != Dimension::Domain::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader Dimension::Domain::Reader::getInt64()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder
Dimension::Domain::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder Dimension::Domain::Builder::initInt64(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
Dimension::Domain::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isUint64() const {
  return which() == Dimension::Domain::UINT64;
}
inline bool Dimension::Domain::Builder::isUint64() {
  return which() == Dimension::Domain::UINT64;
}
inline bool Dimension::Domain::Reader::hasUint64() const {
  if (which() != Dimension::Domain::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasUint64() {
  if (which() != Dimension::Domain::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader Dimension::Domain::Reader::getUint64()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
Dimension::Domain::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
Dimension::Domain::Builder::initUint64(unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
Dimension::Domain::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isFloat32() const {
  return which() == Dimension::Domain::FLOAT32;
}
inline bool Dimension::Domain::Builder::isFloat32() {
  return which() == Dimension::Domain::FLOAT32;
}
inline bool Dimension::Domain::Reader::hasFloat32() const {
  if (which() != Dimension::Domain::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasFloat32() {
  if (which() != Dimension::Domain::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader Dimension::Domain::Reader::getFloat32()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder Dimension::Domain::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder Dimension::Domain::Builder::initFloat32(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
Dimension::Domain::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Domain::Reader::isFloat64() const {
  return which() == Dimension::Domain::FLOAT64;
}
inline bool Dimension::Domain::Builder::isFloat64() {
  return which() == Dimension::Domain::FLOAT64;
}
inline bool Dimension::Domain::Reader::hasFloat64() const {
  if (which() != Dimension::Domain::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Domain::Builder::hasFloat64() {
  if (which() != Dimension::Domain::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader Dimension::Domain::Reader::getFloat64()
    const {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder Dimension::Domain::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Domain::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Dimension::Domain::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder Dimension::Domain::Builder::initFloat64(
    unsigned int size) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Domain::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  _builder.setDataField<Dimension::Domain::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Dimension::Domain::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
Dimension::Domain::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == Dimension::Domain::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasCellOrder() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasCellOrder() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getCellOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setCellOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initCellOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptCellOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasDimensions() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasDimensions() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::Dimension>::Reader Domain::Reader::getDimensions()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::Dimension>::Builder Domain::Builder::getDimensions() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setDimensions(
    ::capnp::List<::Dimension>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::Dimension>::Builder Domain::Builder::initDimensions(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptDimensions(
    ::capnp::Orphan<::capnp::List<::Dimension>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::Dimension>>
Domain::Builder::disownDimensions() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasTileOrder() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasTileOrder() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getTileOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setTileOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initTileOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptTileOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::int64_t Error::Reader::getCode() const {
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::int64_t Error::Builder::getCode() {
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Error::Builder::setCode(::int64_t value) {
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Error::Reader::hasMessage() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Error::Builder::hasMessage() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Error::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Error::Builder::getMessage() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Error::Builder::setMessage(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Error::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Error::Builder::adoptMessage(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Error::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader
Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(
    typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
template <typename Key, typename Value>
inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>
Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey(
    ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue()
    const {
  return ::capnp::_::PointerHelpers<Value>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline ::capnp::PipelineFor<Value>
Map<Key, Value>::Entry::Pipeline::getValue() {
  return ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue(
    ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const*
    Map<Key, Value>::Entry::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope
    Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
        {0xf179c194ae71718c, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding
    Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
        ::capnp::_::brandBindingFor<Key>(),
        ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema
    Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
        &::capnp::schemas::s_db5514c8aaf6faea,
        brandScopes,
        nullptr,
        1,
        0,
        nullptr};
#endif  // !CAPNP_LITE

// Map<Key, Value>
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope
    Map<Key, Value>::_capnpPrivate::brandScopes[] = {
        {0xf179c194ae71718c, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding
    Map<Key, Value>::_capnpPrivate::brandBindings[] = {
        ::capnp::_::brandBindingFor<Key>(),
        ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency
    Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
        {16777216, ::Map<Key, Value>::Entry::_capnpPrivate::brand()},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema
    Map<Key, Value>::_capnpPrivate::specificBrand = {
        &::capnp::schemas::s_f179c194ae71718c,
        brandScopes,
        brandDependencies,
        1,
        1,
        nullptr};
#endif  // !CAPNP_LITE

inline bool MapInt64::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapInt64::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::MapInt64::Entry>::Reader MapInt64::Reader::getEntries()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::MapInt64::Entry>::Builder
MapInt64::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapInt64::Builder::setEntries(
    ::capnp::List<::MapInt64::Entry>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::MapInt64::Entry>::Builder MapInt64::Builder::initEntries(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapInt64::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<::MapInt64::Entry>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::MapInt64::Entry>>
MapInt64::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MapInt64::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapInt64::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapInt64::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapInt64::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapInt64::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapInt64::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapInt64::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapInt64::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::int64_t MapInt64::Entry::Reader::getValue() const {
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::int64_t MapInt64::Entry::Builder::getValue() {
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapInt64::Entry::Builder::setValue(::int64_t value) {
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GlobalWriteState::Reader::hasCellsWritten() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasCellsWritten() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::MapInt64::Reader GlobalWriteState::Reader::getCellsWritten() const {
  return ::capnp::_::PointerHelpers<::MapInt64>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::MapInt64::Builder GlobalWriteState::Builder::getCellsWritten() {
  return ::capnp::_::PointerHelpers<::MapInt64>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::MapInt64::Pipeline GlobalWriteState::Pipeline::getCellsWritten() {
  return ::MapInt64::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setCellsWritten(
    ::MapInt64::Reader value) {
  ::capnp::_::PointerHelpers<::MapInt64>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::MapInt64::Builder GlobalWriteState::Builder::initCellsWritten() {
  return ::capnp::_::PointerHelpers<::MapInt64>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptCellsWritten(
    ::capnp::Orphan<::MapInt64>&& value) {
  ::capnp::_::PointerHelpers<::MapInt64>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::MapInt64>
GlobalWriteState::Builder::disownCellsWritten() {
  return ::capnp::_::PointerHelpers<::MapInt64>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasLastTiles() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasLastTiles() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader
GlobalWriteState::Reader::getLastTiles() const {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder
GlobalWriteState::Builder::getLastTiles() {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Pipeline
GlobalWriteState::Pipeline::getLastTiles() {
  return ::Map<::capnp::Text, ::capnp::List<::Tile>>::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setLastTiles(
    ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder
GlobalWriteState::Builder::initLastTiles() {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptLastTiles(
    ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>
GlobalWriteState::Builder::disownLastTiles() {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint64_t Tile::Reader::getCellSize() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Tile::Builder::getCellSize() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tile::Builder::setCellSize(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Tile::Reader::hasCompressor() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Builder::hasCompressor() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Tile::Reader::getCompressor() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Tile::Builder::getCompressor() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tile::Builder::setCompressor(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Tile::Builder::initCompressor(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Builder::adoptCompressor(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Tile::Builder::disownCompressor() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::int32_t Tile::Reader::getCompressorLevel() const {
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int32_t Tile::Builder::getCompressorLevel() {
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Tile::Builder::setCompressorLevel(::int32_t value) {
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline ::uint32_t Tile::Reader::getDimNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Tile::Builder::getDimNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Tile::Builder::setDimNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Tile::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Tile::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Tile::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Tile::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Tile::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Tile::Buffer::Reader Tile::Reader::getBuffer() const {
  return typename Tile::Buffer::Reader(_reader);
}
inline typename Tile::Buffer::Builder Tile::Builder::getBuffer() {
  return typename Tile::Buffer::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Tile::Buffer::Pipeline Tile::Pipeline::getBuffer() {
  return typename Tile::Buffer::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Tile::Buffer::Builder Tile::Builder::initBuffer() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Tile::Buffer::Builder(_builder);
}
inline ::Tile::Buffer::Which Tile::Buffer::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline ::Tile::Buffer::Which Tile::Buffer::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool Tile::Buffer::Reader::isInt8() const {
  return which() == Tile::Buffer::INT8;
}
inline bool Tile::Buffer::Builder::isInt8() {
  return which() == Tile::Buffer::INT8;
}
inline bool Tile::Buffer::Reader::hasInt8() const {
  if (which() != Tile::Buffer::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt8() {
  if (which() != Tile::Buffer::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader Tile::Buffer::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder Tile::Buffer::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder Tile::Buffer::Builder::initInt8(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
Tile::Buffer::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint8() const {
  return which() == Tile::Buffer::UINT8;
}
inline bool Tile::Buffer::Builder::isUint8() {
  return which() == Tile::Buffer::UINT8;
}
inline bool Tile::Buffer::Reader::hasUint8() const {
  if (which() != Tile::Buffer::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint8() {
  if (which() != Tile::Buffer::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader Tile::Buffer::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder Tile::Buffer::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder Tile::Buffer::Builder::initUint8(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
Tile::Buffer::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isInt16() const {
  return which() == Tile::Buffer::INT16;
}
inline bool Tile::Buffer::Builder::isInt16() {
  return which() == Tile::Buffer::INT16;
}
inline bool Tile::Buffer::Reader::hasInt16() const {
  if (which() != Tile::Buffer::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt16() {
  if (which() != Tile::Buffer::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader Tile::Buffer::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder Tile::Buffer::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder Tile::Buffer::Builder::initInt16(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
Tile::Buffer::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint16() const {
  return which() == Tile::Buffer::UINT16;
}
inline bool Tile::Buffer::Builder::isUint16() {
  return which() == Tile::Buffer::UINT16;
}
inline bool Tile::Buffer::Reader::hasUint16() const {
  if (which() != Tile::Buffer::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint16() {
  if (which() != Tile::Buffer::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader Tile::Buffer::Reader::getUint16()
    const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder Tile::Buffer::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder Tile::Buffer::Builder::initUint16(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
Tile::Buffer::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isInt32() const {
  return which() == Tile::Buffer::INT32;
}
inline bool Tile::Buffer::Builder::isInt32() {
  return which() == Tile::Buffer::INT32;
}
inline bool Tile::Buffer::Reader::hasInt32() const {
  if (which() != Tile::Buffer::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt32() {
  if (which() != Tile::Buffer::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader Tile::Buffer::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder Tile::Buffer::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder Tile::Buffer::Builder::initInt32(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
Tile::Buffer::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint32() const {
  return which() == Tile::Buffer::UINT32;
}
inline bool Tile::Buffer::Builder::isUint32() {
  return which() == Tile::Buffer::UINT32;
}
inline bool Tile::Buffer::Reader::hasUint32() const {
  if (which() != Tile::Buffer::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint32() {
  if (which() != Tile::Buffer::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader Tile::Buffer::Reader::getUint32()
    const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder Tile::Buffer::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder Tile::Buffer::Builder::initUint32(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
Tile::Buffer::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isInt64() const {
  return which() == Tile::Buffer::INT64;
}
inline bool Tile::Buffer::Builder::isInt64() {
  return which() == Tile::Buffer::INT64;
}
inline bool Tile::Buffer::Reader::hasInt64() const {
  if (which() != Tile::Buffer::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt64() {
  if (which() != Tile::Buffer::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader Tile::Buffer::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder Tile::Buffer::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder Tile::Buffer::Builder::initInt64(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
Tile::Buffer::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint64() const {
  return which() == Tile::Buffer::UINT64;
}
inline bool Tile::Buffer::Builder::isUint64() {
  return which() == Tile::Buffer::UINT64;
}
inline bool Tile::Buffer::Reader::hasUint64() const {
  if (which() != Tile::Buffer::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint64() {
  if (which() != Tile::Buffer::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader Tile::Buffer::Reader::getUint64()
    const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder Tile::Buffer::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder Tile::Buffer::Builder::initUint64(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
Tile::Buffer::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isFloat32() const {
  return which() == Tile::Buffer::FLOAT32;
}
inline bool Tile::Buffer::Builder::isFloat32() {
  return which() == Tile::Buffer::FLOAT32;
}
inline bool Tile::Buffer::Reader::hasFloat32() const {
  if (which() != Tile::Buffer::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasFloat32() {
  if (which() != Tile::Buffer::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader Tile::Buffer::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder Tile::Buffer::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder Tile::Buffer::Builder::initFloat32(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
Tile::Buffer::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isFloat64() const {
  return which() == Tile::Buffer::FLOAT64;
}
inline bool Tile::Buffer::Builder::isFloat64() {
  return which() == Tile::Buffer::FLOAT64;
}
inline bool Tile::Buffer::Reader::hasFloat64() const {
  if (which() != Tile::Buffer::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasFloat64() {
  if (which() != Tile::Buffer::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader Tile::Buffer::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder Tile::Buffer::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder Tile::Buffer::Builder::initFloat64(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
Tile::Buffer::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::hasGlobalWriteState() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasGlobalWriteState() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::GlobalWriteState::Reader Writer::Reader::getGlobalWriteState() const {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::GlobalWriteState::Builder Writer::Builder::getGlobalWriteState() {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::GlobalWriteState::Pipeline Writer::Pipeline::getGlobalWriteState() {
  return ::GlobalWriteState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setGlobalWriteState(
    ::GlobalWriteState::Reader value) {
  ::capnp::_::PointerHelpers<::GlobalWriteState>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::GlobalWriteState::Builder Writer::Builder::initGlobalWriteState() {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptGlobalWriteState(
    ::capnp::Orphan<::GlobalWriteState>&& value) {
  ::capnp::_::PointerHelpers<::GlobalWriteState>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::GlobalWriteState>
Writer::Builder::disownGlobalWriteState() {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasArraySchema() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasArraySchema() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::ArraySchema::Reader Query::Reader::getArraySchema() const {
  return ::capnp::_::PointerHelpers<::ArraySchema>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::ArraySchema::Builder Query::Builder::getArraySchema() {
  return ::capnp::_::PointerHelpers<::ArraySchema>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::ArraySchema::Pipeline Query::Pipeline::getArraySchema() {
  return ::ArraySchema::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setArraySchema(::ArraySchema::Reader value) {
  ::capnp::_::PointerHelpers<::ArraySchema>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::ArraySchema::Builder Query::Builder::initArraySchema() {
  return ::capnp::_::PointerHelpers<::ArraySchema>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptArraySchema(
    ::capnp::Orphan<::ArraySchema>&& value) {
  ::capnp::_::PointerHelpers<::ArraySchema>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::ArraySchema> Query::Builder::disownArraySchema() {
  return ::capnp::_::PointerHelpers<::ArraySchema>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasBuffers() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasBuffers() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::AttributeBuffer>::Reader
Query::Reader::getBuffers() const {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder
Query::Builder::getBuffers() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::AttributeBuffer>::Pipeline
Query::Pipeline::getBuffers() {
  return ::Map<::capnp::Text, ::AttributeBuffer>::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setBuffers(
    ::Map<::capnp::Text, ::AttributeBuffer>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder
Query::Builder::initBuffers() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptBuffers(
    ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>
Query::Builder::disownBuffers() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Query::Builder::setLayout(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initLayout(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptLayout(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasStatus() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasStatus() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Query::Builder::setStatus(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptStatus(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Query::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasWriter() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasWriter() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Writer::Reader Query::Reader::getWriter() const {
  return ::capnp::_::PointerHelpers<::Writer>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::Writer::Builder Query::Builder::getWriter() {
  return ::capnp::_::PointerHelpers<::Writer>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Writer::Pipeline Query::Pipeline::getWriter() {
  return ::Writer::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setWriter(::Writer::Reader value) {
  ::capnp::_::PointerHelpers<::Writer>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::Writer::Builder Query::Builder::initWriter() {
  return ::capnp::_::PointerHelpers<::Writer>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptWriter(::capnp::Orphan<::Writer>&& value) {
  ::capnp::_::PointerHelpers<::Writer>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Writer> Query::Builder::disownWriter() {
  return ::capnp::_::PointerHelpers<::Writer>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline typename Query::Subarray::Reader Query::Reader::getSubarray() const {
  return typename Query::Subarray::Reader(_reader);
}
inline typename Query::Subarray::Builder Query::Builder::getSubarray() {
  return typename Query::Subarray::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Query::Subarray::Pipeline Query::Pipeline::getSubarray() {
  return typename Query::Subarray::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Query::Subarray::Builder Query::Builder::initSubarray() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS).clear();
  return typename Query::Subarray::Builder(_builder);
}
inline ::Query::Subarray::Which Query::Subarray::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline ::Query::Subarray::Which Query::Subarray::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Query::Subarray::Reader::isInt8() const {
  return which() == Query::Subarray::INT8;
}
inline bool Query::Subarray::Builder::isInt8() {
  return which() == Query::Subarray::INT8;
}
inline bool Query::Subarray::Reader::hasInt8() const {
  if (which() != Query::Subarray::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasInt8() {
  if (which() != Query::Subarray::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader Query::Subarray::Reader::getInt8()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder Query::Subarray::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder Query::Subarray::Builder::initInt8(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
Query::Subarray::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isUint8() const {
  return which() == Query::Subarray::UINT8;
}
inline bool Query::Subarray::Builder::isUint8() {
  return which() == Query::Subarray::UINT8;
}
inline bool Query::Subarray::Reader::hasUint8() const {
  if (which() != Query::Subarray::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasUint8() {
  if (which() != Query::Subarray::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader Query::Subarray::Reader::getUint8()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder Query::Subarray::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder Query::Subarray::Builder::initUint8(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
Query::Subarray::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isInt16() const {
  return which() == Query::Subarray::INT16;
}
inline bool Query::Subarray::Builder::isInt16() {
  return which() == Query::Subarray::INT16;
}
inline bool Query::Subarray::Reader::hasInt16() const {
  if (which() != Query::Subarray::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasInt16() {
  if (which() != Query::Subarray::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader Query::Subarray::Reader::getInt16()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder Query::Subarray::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder Query::Subarray::Builder::initInt16(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
Query::Subarray::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isUint16() const {
  return which() == Query::Subarray::UINT16;
}
inline bool Query::Subarray::Builder::isUint16() {
  return which() == Query::Subarray::UINT16;
}
inline bool Query::Subarray::Reader::hasUint16() const {
  if (which() != Query::Subarray::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasUint16() {
  if (which() != Query::Subarray::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader Query::Subarray::Reader::getUint16()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder
Query::Subarray::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder Query::Subarray::Builder::initUint16(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
Query::Subarray::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isInt32() const {
  return which() == Query::Subarray::INT32;
}
inline bool Query::Subarray::Builder::isInt32() {
  return which() == Query::Subarray::INT32;
}
inline bool Query::Subarray::Reader::hasInt32() const {
  if (which() != Query::Subarray::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasInt32() {
  if (which() != Query::Subarray::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader Query::Subarray::Reader::getInt32()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder Query::Subarray::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder Query::Subarray::Builder::initInt32(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
Query::Subarray::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isUint32() const {
  return which() == Query::Subarray::UINT32;
}
inline bool Query::Subarray::Builder::isUint32() {
  return which() == Query::Subarray::UINT32;
}
inline bool Query::Subarray::Reader::hasUint32() const {
  if (which() != Query::Subarray::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasUint32() {
  if (which() != Query::Subarray::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader Query::Subarray::Reader::getUint32()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder
Query::Subarray::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder Query::Subarray::Builder::initUint32(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
Query::Subarray::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isInt64() const {
  return which() == Query::Subarray::INT64;
}
inline bool Query::Subarray::Builder::isInt64() {
  return which() == Query::Subarray::INT64;
}
inline bool Query::Subarray::Reader::hasInt64() const {
  if (which() != Query::Subarray::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasInt64() {
  if (which() != Query::Subarray::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader Query::Subarray::Reader::getInt64()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder Query::Subarray::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder Query::Subarray::Builder::initInt64(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
Query::Subarray::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isUint64() const {
  return which() == Query::Subarray::UINT64;
}
inline bool Query::Subarray::Builder::isUint64() {
  return which() == Query::Subarray::UINT64;
}
inline bool Query::Subarray::Reader::hasUint64() const {
  if (which() != Query::Subarray::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasUint64() {
  if (which() != Query::Subarray::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader Query::Subarray::Reader::getUint64()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
Query::Subarray::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder Query::Subarray::Builder::initUint64(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
Query::Subarray::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isFloat32() const {
  return which() == Query::Subarray::FLOAT32;
}
inline bool Query::Subarray::Builder::isFloat32() {
  return which() == Query::Subarray::FLOAT32;
}
inline bool Query::Subarray::Reader::hasFloat32() const {
  if (which() != Query::Subarray::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasFloat32() {
  if (which() != Query::Subarray::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader Query::Subarray::Reader::getFloat32()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder Query::Subarray::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder Query::Subarray::Builder::initFloat32(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
Query::Subarray::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Query::Subarray::Reader::isFloat64() const {
  return which() == Query::Subarray::FLOAT64;
}
inline bool Query::Subarray::Builder::isFloat64() {
  return which() == Query::Subarray::FLOAT64;
}
inline bool Query::Subarray::Reader::hasFloat64() const {
  if (which() != Query::Subarray::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Subarray::Builder::hasFloat64() {
  if (which() != Query::Subarray::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader Query::Subarray::Reader::getFloat64()
    const {
  KJ_IREQUIRE(
      (which() == Query::Subarray::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder Query::Subarray::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Subarray::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void Query::Subarray::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder Query::Subarray::Builder::initFloat64(
    unsigned int size) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void Query::Subarray::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  _builder.setDataField<Query::Subarray::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Query::Subarray::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
Query::Subarray::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == Query::Subarray::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

#endif  // CAPNP_INCLUDED_b57d9224b587d87f_
